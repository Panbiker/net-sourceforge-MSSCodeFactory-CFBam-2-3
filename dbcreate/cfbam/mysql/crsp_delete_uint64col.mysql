--
--	@(#) dbcreate/cfbam/mysql/crsp_delete_uint64col.mysql
-- **********************************************************************
--
--	CFBam
--
--	Copyright (c) 2014-2015 Mark Sobkow
--	
--	This program is available as free software under the GNU GPL v3, under
--	the Eclipse Public License 1.0, or under a commercial license from Mark
--	Sobkow.  For commercial licensing details, please contact msobkow@sasktel.net.
--	
--	You should have received copies of the complete license text for
--	GPLv3.txt and EPLv1_0.txt, containing the text
--	of the GNU General Public License v 3.0 and the Eclipse Public License v 1.0.
--	
--	Under the terms of the GPL:
--	
--		This program is free software: you can redistribute it and/or modify
--		it under the terms of the GNU General Public License as published by
--		the Free Software Foundation, either version 3 of the License, or
--		(at your option) any later version.
--	  
--		This program is distributed in the hope that it will be useful,
--		but WITHOUT ANY WARRANTY; without even the implied warranty of
--		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--		GNU General Public License for more details.
--	  
--		You should have received a copy of the GNU General Public License
--		along with this program.  If not, see <http://www.gnu.org/licenses/>.
--	
--	This software incorporates code originally Copyright (c) Mark Sobkow 2014-2015
--	and licensed under the BSD 3-Clause license as written by xfree86.org:
--	
--	Redistribution and use in source and binary forms, with or without
--	modification, are permitted provided that the following conditions are
--	met:
--	
--	    (1) Redistributions of source code must retain the above copyright
--	    notice, this list of conditions and the following disclaimer. 
--	
--	    (2) Redistributions in binary form must reproduce the above copyright
--	    notice, this list of conditions and the following disclaimer in
--	    the documentation and/or other materials provided with the
--	    distribution.  
--	    
--	    (3)The name of the author may not be used to
--	    endorse or promote products derived from this software without
--	    specific prior written permission.
--	
--	THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
--	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
--	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
--	DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
--	INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
--	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
--	SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
--	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
--	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
--	IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
--	POSSIBILITY OF SUCH DAMAGE.
--	
--
-- ***********************************************************************
--
--	Code manufactured by MSS Code Factory
--

delimiter ////
create procedure cfbam23.sp_delete_uint64col(
	argAuditClusterId bigint,
	argAuditUserId varchar(36),
	argAuditSessionId varchar(36),
	secClusterId bigint,
	secTenantId bigint,
	argTenantId bigint,
	argId bigint,
	argRevision int )
not deterministic
modifies sql data
begin
	declare RowsAffected bigint;
	declare varTenantId bigint;
	declare varTableId bigint;
	declare prevClassCode varchar(4);
	declare nextClassCode varchar(4);
	declare prevPrevTenantId bigint;
	declare prevPrevId bigint;
	declare nextNextTenantId bigint;
	declare nextNextId bigint;
	declare oldClassCode varchar(4);
	declare oldTenantId bigint;
	declare oldScopeId bigint;
	declare oldId bigint;
	declare oldDefSchemaTenantId bigint;
	declare oldDefSchemaId bigint;
	declare oldName varchar(192);
	declare oldShortName varchar(16);
	declare oldLabel varchar(64);
	declare oldShortDescription varchar(128);
	declare oldDescription varchar(1023);
	declare oldIsNullable boolean;
	declare oldGenerateId boolean;
	declare oldDataScopeId smallint;
	declare oldViewAccessSecurityId smallint;
	declare oldEditAccessSecurityId smallint;
	declare oldViewAccessFrequencyId smallint;
	declare oldEditAccessFrequencyId smallint;
	declare oldPrevTenantId bigint;
	declare oldPrevId bigint;
	declare oldNextTenantId bigint;
	declare oldNextId bigint;
	declare oldDefaultVisibility boolean;
	declare oldRevision int;
	declare oldDbName varchar(32);
	declare oldInitValue numeric(22,0);
	declare oldDefaultValue numeric(22,0);
	declare oldMinValue numeric(22,0);
	declare oldMaxValue numeric(22,0);
	declare oldNullValue numeric(22,0);
	declare oldUnknownValue numeric(22,0);
	declare oldTableId bigint;
	declare permissionFlag boolean;
	declare isSystemUser boolean;
	declare done int default false;
	declare continue handler for not found set done = true;
	select
		tenantid,
		tableid
	into
		varTenantId,
		varTableId
	from cfbam23.uint64col
	where
		tenantid = argTenantId
		and id = argId;

	update cfbam23.scopedef
	set revision = revision + 1
	where
		tenantid = varTenantId
		and id = varTableId;

	select
			ClassCode,
		TenantId,
		ScopeId,
		Id,
		defschtentid,
		defschid,
		Name,
		short_name,
		Label,
		short_descr,
		descr,
		IsNullable,
		GenerateId,
		DataScopeId,
		VASecId,
		EASecId,
		VAFId,
		EAFId,
		PrevTenantId,
		PrevId,
		NextTenantId,
		NextId,
		dflt_vis,
			revision
	into
		oldClassCode,
			oldTenantId,
			oldScopeId,
			oldId,
			oldDefSchemaTenantId,
			oldDefSchemaId,
			oldName,
			oldShortName,
			oldLabel,
			oldShortDescription,
			oldDescription,
			oldIsNullable,
			oldGenerateId,
			oldDataScopeId,
			oldViewAccessSecurityId,
			oldEditAccessSecurityId,
			oldViewAccessFrequencyId,
			oldEditAccessFrequencyId,
			oldPrevTenantId,
			oldPrevId,
			oldNextTenantId,
			oldNextId,
			oldDefaultVisibility,
		oldRevision
	from cfbam23.valdef
	where
		TenantId = argTenantId
		and Id = argId
	for update;
	select
			TenantId,
		Id,
		DbName
	into
		oldTenantId,
			oldId,
			oldDbName
	from cfbam23.atomdef
	where
		TenantId = argTenantId
		and Id = argId
	for update;
	select
			TenantId,
		Id,
		InitVal,
		DefVal,
		MinVal,
		MaxVal,
		NullValue,
		UnknownVal
	into
		oldTenantId,
			oldId,
			oldInitValue,
			oldDefaultValue,
			oldMinValue,
			oldMaxValue,
			oldNullValue,
			oldUnknownValue
	from cfbam23.u64def
	where
		TenantId = argTenantId
		and Id = argId
	for update;
	select
			TenantId,
		Id,
		TableId
	into
		oldTenantId,
			oldId,
			oldTableId
	from cfbam23.uint64col
	where
		TenantId = argTenantId
		and Id = argId
	for update;
	if( oldTenantId != secTenantId )
	then
		select cfbam23.sp_is_system_user( argAuditUserId )
		into permissionFlag;

		if( permissionFlag = false )
		then
			signal sqlstate '45001'
			set message_text = 'sp_delete_uint64col() Permission denied, not identified as system',
				schema_name = 'cfbam23',
				table_name = 'uint64col';
		end if;
	end if;

	select cfbam23.sp_is_tenant_user( oldTenantId,
			'DeleteUInt64Col',
			argAuditUserId ),
		cfbam23.sp_is_system_user( argAuditUserId )
	into permissionFlag, isSystemUser;

	if( ( permissionFlag = false ) and ( isSystemUser = false ) )
	then
		signal sqlstate '45003'
		set message_text = 'sp_delete_uint64col() Permission denied, not granted access to DeleteUInt64Col for current Tenant',
			schema_name = 'cfbam23',
			table_name = 'uint64col';
	end if;

	select
		prvvalu.classcode as prvclasscode,
		myself.prevtenantid as prvprevtenantid,
		myself.previd as prvprevid,
		nxtvalu.classcode as nxtclasscode,
		myself.nexttenantid as nxtnexttenantid,
		myself.nextid as nxtnextid
	into
		prevClassCode,
		prevPrevTenantId,
		prevPrevId,
		nextClassCode,
		nextNextTenantId,
		nextNextId
	from cfbam23.valdef myself
		left outer join cfbam23.valdef prvvalu on
			prvvalu.tenantid = myself.prevtenantid
			and prvvalu.id = myself.previd
		left outer join cfbam23.valdef nxtvalu on
			nxtvalu.tenantid = myself.nexttenantid
			and nxtvalu.id = myself.nextid
	where
		myself.tenantid = argTenantId
		and myself.id = argId;

	if( prevPrevTenantId is not null )
	then
		update cfbam23.valdef
		set
			revision = revision + 1,
			updatedby = argAuditUserId,
			updatedat = now(),
			nexttenantid = nextNextTenantId,
			nextid = nextNextId
		where
			tenantid = prevPrevTenantId
			and id = prevPrevId;

		call cfbam23.sp_audit_valdef( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			prevClassCode,
			prevPrevTenantId,
			prevPrevId,
			2 );
	end if;

	if( nextNextTenantId is not null )
	then
		update cfbam23.valdef
		set
			revision = revision + 1,
			updatedby = argAuditUserId,
			updatedat = now(),
			prevtenantid = prevPrevTenantId,
			previd = prevPrevId
		where
			tenantid = nextNextTenantId
			and id = nextNextId;

		call cfbam23.sp_audit_valdef( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			nextClassCode,
			nextNextTenantId,
			nextNextId,
			2 );
	end if;

	if( oldClassCode = 'U64C' )
	then
		insert into cfbam23.uint64col_h (
			tenantid,
			id,
			classcode,
			auditclusterid,
			auditsessionid,
			auditstamp,
			scopeid,
			defschtentid,
			defschid,
			name,
			short_name,
			label,
			short_descr,
			descr,
			isnullable,
			generateid,
			datascopeid,
			vasecid,
			easecid,
			vafid,
			eafid,
			prevtenantid,
			previd,
			nexttenantid,
			nextid,
			dflt_vis,
			dbname,
			initval,
			defval,
			minval,
			maxval,
			nullvalue,
			unknownval,
			tableid,
			revision,
			auditaction )
		select
			valu.tenantid,
			valu.id,
			valu.classcode,
			argAuditClusterId,
			argAuditSessionId,
			now(),
			valu.scopeid,
			valu.defschtentid,
			valu.defschid,
			valu.name,
			valu.short_name,
			valu.label,
			valu.short_descr,
			valu.descr,
			valu.isnullable,
			valu.generateid,
			valu.datascopeid,
			valu.vasecid,
			valu.easecid,
			valu.vafid,
			valu.eafid,
			valu.prevtenantid,
			valu.previd,
			valu.nexttenantid,
			valu.nextid,
			valu.dflt_vis,
			atom.dbname,
			u64d.initval,
			u64d.defval,
			u64d.minval,
			u64d.maxval,
			u64d.nullvalue,
			u64d.unknownval,
			u64c.tableid,
			valu.revision + 1,
			3
		from cfbam23.uint64col as u64c
		inner join cfbam23.u64def u64d on
			u64c.tenantid = u64d.tenantid
			and u64c.Id = u64d.id
		inner join cfbam23.atomdef atom on
			u64d.tenantid = atom.tenantid
			and u64d.Id = atom.id
		inner join cfbam23.valdef valu on
			atom.tenantid = valu.tenantid
			and atom.Id = valu.id
		where
			u64c.tenantid = argTenantId
		and u64c.id = argId;
	end if;

	delete from cfbam23.uint64col
	where
		tenantid = argTenantId
		and id = argId;
	select row_count()
	into RowsAffected;

	if RowsAffected != 1 and RowsAffected != 0
	then
		signal sqlstate '45000'
		set message_text = 'sp_delete_uint64col() Expected to affect 1 uint64col',
			schema_name = 'cfbam23',
			table_name = 'uint64col';
	end if;

	delete from cfbam23.u64def
	where
		tenantid = argTenantId
		and id = argId;
	select row_count()
	into RowsAffected;

	if RowsAffected != 1 and RowsAffected != 0
	then
		signal sqlstate '45000'
		set message_text = 'sp_delete_uint64col() Expected to affect 1 u64def',
			schema_name = 'cfbam23',
			table_name = 'uint64col';
	end if;

	delete from cfbam23.atomdef
	where
		tenantid = argTenantId
		and id = argId;
	select row_count()
	into RowsAffected;

	if RowsAffected != 1 and RowsAffected != 0
	then
		signal sqlstate '45000'
		set message_text = 'sp_delete_uint64col() Expected to affect 1 atomdef',
			schema_name = 'cfbam23',
			table_name = 'uint64col';
	end if;

	delete from cfbam23.valdef
	where
		tenantid = argTenantId
		and id = argId;
	select row_count()
	into RowsAffected;

	if RowsAffected != 1 and RowsAffected != 0
	then
		signal sqlstate '45000'
		set message_text = 'sp_delete_uint64col() Expected to affect 1 valdef',
			schema_name = 'cfbam23',
			table_name = 'uint64col';
	end if;

	update cfbam23.scopedef
	set revision = revision - 1
	where
		tenantid = varTenantId
		and id = varTableId;

end;////
