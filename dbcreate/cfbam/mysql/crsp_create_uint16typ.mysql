--
--	@(#) dbcreate/cfbam/mysql/crsp_create_uint16typ.mysql
-- **********************************************************************
--
--	CFBam
--
--	Copyright (c) 2014-2015 Mark Sobkow
--	
--	This program is available as free software under the GNU GPL v3, under
--	the Eclipse Public License 1.0, or under a commercial license from Mark
--	Sobkow.  For commercial licensing details, please contact msobkow@sasktel.net.
--	
--	You should have received copies of the complete license text for
--	GPLv3.txt and EPLv1_0.txt, containing the text
--	of the GNU General Public License v 3.0 and the Eclipse Public License v 1.0.
--	
--	Under the terms of the GPL:
--	
--		This program is free software: you can redistribute it and/or modify
--		it under the terms of the GNU General Public License as published by
--		the Free Software Foundation, either version 3 of the License, or
--		(at your option) any later version.
--	  
--		This program is distributed in the hope that it will be useful,
--		but WITHOUT ANY WARRANTY; without even the implied warranty of
--		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--		GNU General Public License for more details.
--	  
--		You should have received a copy of the GNU General Public License
--		along with this program.  If not, see <http://www.gnu.org/licenses/>.
--	
--	This software incorporates code originally Copyright (c) Mark Sobkow 2014-2015
--	and licensed under the BSD 3-Clause license as written by xfree86.org:
--	
--	Redistribution and use in source and binary forms, with or without
--	modification, are permitted provided that the following conditions are
--	met:
--	
--	    (1) Redistributions of source code must retain the above copyright
--	    notice, this list of conditions and the following disclaimer. 
--	
--	    (2) Redistributions in binary form must reproduce the above copyright
--	    notice, this list of conditions and the following disclaimer in
--	    the documentation and/or other materials provided with the
--	    distribution.  
--	    
--	    (3)The name of the author may not be used to
--	    endorse or promote products derived from this software without
--	    specific prior written permission.
--	
--	THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
--	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
--	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
--	DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
--	INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
--	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
--	SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
--	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
--	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
--	IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
--	POSSIBILITY OF SUCH DAMAGE.
--	
--
-- ***********************************************************************
--
--	Code manufactured by MSS Code Factory
--

delimiter ////
create procedure cfbam23.sp_create_uint16typ(
	argAuditClusterId bigint,
	argAuditUserId varchar(36),
	argAuditSessionId varchar(36),
	secClusterId bigint,
	secTenantId bigint,
	argClassCode varchar(4),
	argTenantId bigint,
	argScopeId bigint,
	argDefSchemaTenantId bigint,
	argDefSchemaId bigint,
	argName varchar(192),
	argShortName varchar(16),
	argLabel varchar(64),
	argShortDescription varchar(128),
	argDescription varchar(1023),
	argIsNullable boolean,
	argGenerateId boolean,
	argDataScopeId smallint,
	argViewAccessSecurityId smallint,
	argEditAccessSecurityId smallint,
	argViewAccessFrequencyId smallint,
	argEditAccessFrequencyId smallint,
	argPrevTenantId bigint,
	argPrevId bigint,
	argNextTenantId bigint,
	argNextId bigint,
	argDefaultVisibility boolean,
	argDbName varchar(32),
	argInitValue integer,
	argDefaultValue integer,
	argMinValue integer,
	argMaxValue integer,
	argNullValue integer,
	argUnknownValue integer,
	argSchemaDefId bigint )
not deterministic
modifies sql data
begin
	declare permissionFlag boolean;
	declare isSystemUser boolean;
	declare argId bigint;
	declare subret boolean;
	declare prevClassCode varchar(4);
	declare prevPrevTenantId bigint;
	declare prevPrevId bigint;
	if( argClassCode = 'U16T' )
	then
		select cfbam23.sp_is_tenant_user( argTenantId,
				'CreateUInt16Type',
				argAuditUserId ),
			cfbam23.sp_is_system_user( argAuditUserId )
		into permissionFlag, isSystemUser;

		if( ( permissionFlag = false ) and ( isSystemUser = false ) )
		then
			signal sqlstate '45003'
			set message_text = 'sp_create_uint16typ() Permission denied, not granted CreateUInt16Type access to current Tenant',
				schema_name = 'cfbam23',
				table_name = 'uint16typ';
		end if;
	end if;

	update cfbam23.scopedef
	set revision = revision + 1
	where
		tenantid = argTenantId
		and id = argSchemaDefId;

	select
		valu.tenantid as tenantid,
		valu.id as id,
		valu.classcode
	into
		prevPrevTenantId,
		prevPrevId,
		prevClassCode
	from cfbam23.valdef valu
	where
		valu.tenantid = argTenantId
		and valu.scopeid = argScopeId
		and valu.nexttenantid is null
		and valu.nextid is null;

	select cfbam23.sp_next_valueidgen( argTenantId )
	into argId;

	insert into cfbam23.valdef(
		classcode,
		createdby,
		createdat,
		updatedby,
		updatedat,
		tenantid,
		scopeid,
		id,
		defschtentid,
		defschid,
		name,
		short_name,
		label,
		short_descr,
		descr,
		isnullable,
		generateid,
		datascopeid,
		vasecid,
		easecid,
		vafid,
		eafid,
		prevtenantid,
		previd,
		nexttenantid,
		nextid,
		dflt_vis,
		revision )
	values (
		argClassCode,
		argAuditUserId,
		now(),
		argAuditUserId,
		now(),
		argTenantId,
		argScopeId,
		argId,
		argDefSchemaTenantId,
		argDefSchemaId,
		argName,
		argShortName,
		argLabel,
		argShortDescription,
		argDescription,
		argIsNullable,
		argGenerateId,
		argDataScopeId,
		argViewAccessSecurityId,
		argEditAccessSecurityId,
		argViewAccessFrequencyId,
		argEditAccessFrequencyId,
		prevPrevTenantId,
		prevPrevId,
		null,
		null,
		argDefaultVisibility,
		1 );

	insert into cfbam23.atomdef(
		tenantid,
		id,
		dbname )
	values (
		argTenantId,
		argId,
		argDbName );

	insert into cfbam23.u16def(
		tenantid,
		id,
		initval,
		defval,
		minval,
		maxval,
		nullvalue,
		unknownval )
	values (
		argTenantId,
		argId,
		argInitValue,
		argDefaultValue,
		argMinValue,
		argMaxValue,
		argNullValue,
		argUnknownValue );

	insert into cfbam23.uint16typ(
		tenantid,
		id,
		schemadefid )
	values (
		argTenantId,
		argId,
		argSchemaDefId );

	if( argClassCode = 'U16T' )
	then insert into cfbam23.uint16typ_h (
			tenantid,
			id,
			classcode,
			auditclusterid,
			auditsessionid,
			auditstamp,
			scopeid,
			defschtentid,
			defschid,
			name,
			short_name,
			label,
			short_descr,
			descr,
			isnullable,
			generateid,
			datascopeid,
			vasecid,
			easecid,
			vafid,
			eafid,
			prevtenantid,
			previd,
			nexttenantid,
			nextid,
			dflt_vis,
			dbname,
			initval,
			defval,
			minval,
			maxval,
			nullvalue,
			unknownval,
			schemadefid,
			revision,
			auditaction )
		select
			valu.tenantid,
			valu.id,
			valu.classcode,
			argAuditClusterId,
			argAuditSessionId,
			now(),
			valu.scopeid,
			valu.defschtentid,
			valu.defschid,
			valu.name,
			valu.short_name,
			valu.label,
			valu.short_descr,
			valu.descr,
			valu.isnullable,
			valu.generateid,
			valu.datascopeid,
			valu.vasecid,
			valu.easecid,
			valu.vafid,
			valu.eafid,
			valu.prevtenantid,
			valu.previd,
			valu.nexttenantid,
			valu.nextid,
			valu.dflt_vis,
			atom.dbname,
			u16d.initval,
			u16d.defval,
			u16d.minval,
			u16d.maxval,
			u16d.nullvalue,
			u16d.unknownval,
			u16t.schemadefid,
			valu.revision,
			1
		from cfbam23.uint16typ as u16t
		inner join cfbam23.u16def u16d on
			u16t.tenantid = u16d.tenantid
			and u16t.Id = u16d.id
		inner join cfbam23.atomdef atom on
			u16d.tenantid = atom.tenantid
			and u16d.Id = atom.id
		inner join cfbam23.valdef valu on
			atom.tenantid = valu.tenantid
			and atom.Id = valu.id
		where
			u16t.tenantid = argTenantId
		and u16t.id = argId;
	end if;

	if( prevPrevTenantId is not null )
	then
		update cfbam23.valdef
		set
			revision = revision + 1,
			updatedby = argAuditUserId,
			updatedat = now(),
			nexttenantid = argTenantId,
			nextid = argId
		where
			tenantid = prevPrevTenantId
			and id = prevPrevId;

		call cfbam23.sp_audit_valdef( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			prevClassCode,
			prevPrevTenantId,
			prevPrevId,
			2 );
	end if;

	update cfbam23.scopedef
	set revision = revision - 1
	where
		tenantid = argTenantId
		and id = argSchemaDefId;

	select
			valu.ClassCode,
			date_format( valu.createdat, '%Y-%m-%d %H:%i:%S' ) as createdat,
			valu.createdby as createdby,
			date_format( valu.updatedat, '%Y-%m-%d %H:%i:%S' ) as updatedat,
			valu.updatedby as updatedby,
			valu.tenantid as tenantid,
			valu.scopeid as scopeid,
			valu.id as id,
			valu.defschtentid as defschtentid,
			valu.defschid as defschid,
			valu.name as name,
			valu.short_name as short_name,
			valu.label as label,
			valu.short_descr as short_descr,
			valu.descr as descr,
			valu.isnullable as isnullable,
			valu.generateid as generateid,
			valu.datascopeid as datascopeid,
			valu.vasecid as vasecid,
			valu.easecid as easecid,
			valu.vafid as vafid,
			valu.eafid as eafid,
			valu.prevtenantid as prevtenantid,
			valu.previd as previd,
			valu.nexttenantid as nexttenantid,
			valu.nextid as nextid,
			valu.dflt_vis as dflt_vis,
			atom.dbname as dbname,
			u16d.initval as initval,
			u16d.defval as defval,
			u16d.minval as minval,
			u16d.maxval as maxval,
			u16d.nullvalue as nullvalue,
			u16d.unknownval as unknownval,
			u16t.schemadefid as schemadefid,
			valu.revision as revision
	from cfbam23.uint16typ as u16t
		inner join cfbam23.u16def u16d on
			u16t.tenantid = u16d.tenantid
			and u16t.Id = u16d.id
		inner join cfbam23.atomdef atom on
			u16d.tenantid = atom.tenantid
			and u16d.Id = atom.id
		inner join cfbam23.valdef valu on
			atom.tenantid = valu.tenantid
			and atom.Id = valu.id
	where
		u16t.tenantid = argTenantId
		and u16t.id = argId;
end;////
