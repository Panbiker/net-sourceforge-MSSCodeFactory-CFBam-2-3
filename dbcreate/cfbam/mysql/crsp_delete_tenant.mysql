--
--	@(#) dbcreate/cfbam/mysql/crsp_delete_tenant.mysql
-- **********************************************************************
--
--	CFBam
--
--	Copyright (c) 2014-2015 Mark Sobkow
--	
--	This program is available as free software under the GNU GPL v3, under
--	the Eclipse Public License 1.0, or under a commercial license from Mark
--	Sobkow.  For commercial licensing details, please contact msobkow@sasktel.net.
--	
--	You should have received copies of the complete license text for
--	GPLv3.txt and EPLv1_0.txt, containing the text
--	of the GNU General Public License v 3.0 and the Eclipse Public License v 1.0.
--	
--	Under the terms of the GPL:
--	
--		This program is free software: you can redistribute it and/or modify
--		it under the terms of the GNU General Public License as published by
--		the Free Software Foundation, either version 3 of the License, or
--		(at your option) any later version.
--	  
--		This program is distributed in the hope that it will be useful,
--		but WITHOUT ANY WARRANTY; without even the implied warranty of
--		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--		GNU General Public License for more details.
--	  
--		You should have received a copy of the GNU General Public License
--		along with this program.  If not, see <http://www.gnu.org/licenses/>.
--	
--	This software incorporates code originally Copyright (c) Mark Sobkow 2014-2015
--	and licensed under the BSD 3-Clause license as written by xfree86.org:
--	
--	Redistribution and use in source and binary forms, with or without
--	modification, are permitted provided that the following conditions are
--	met:
--	
--	    (1) Redistributions of source code must retain the above copyright
--	    notice, this list of conditions and the following disclaimer. 
--	
--	    (2) Redistributions in binary form must reproduce the above copyright
--	    notice, this list of conditions and the following disclaimer in
--	    the documentation and/or other materials provided with the
--	    distribution.  
--	    
--	    (3)The name of the author may not be used to
--	    endorse or promote products derived from this software without
--	    specific prior written permission.
--	
--	THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
--	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
--	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
--	DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
--	INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
--	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
--	SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
--	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
--	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
--	IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
--	POSSIBILITY OF SUCH DAMAGE.
--	
--
-- ***********************************************************************
--
--	Code manufactured by MSS Code Factory
--

delimiter ////
create procedure cfbam23.sp_delete_tenant(
	argAuditClusterId bigint,
	argAuditUserId varchar(36),
	argAuditSessionId varchar(36),
	secClusterId bigint,
	secTenantId bigint,
	argId bigint,
	argRevision int )
not deterministic
modifies sql data
begin
	declare RowsAffected bigint;
	declare oldClusterId bigint;
	declare oldId bigint;
	declare oldTenantName varchar(192);
	declare oldRevision int;
	declare permissionFlag boolean;
	declare isSystemUser boolean;
	declare done int default false;
	declare cleartablerelationnarrowedTenantId bigint;
	declare cleartablerelationnarrowedId bigint;
	declare deltablechainTenantId bigint;
	declare deltablechainId bigint;
	declare deltablerelationcolTenantId bigint;
	declare deltablerelationcolId bigint;
	declare deltablerelationTenantId bigint;
	declare deltablerelationId bigint;
	declare deltableTenantId bigint;
	declare deltableId bigint;
	declare deltypedefTenantId bigint;
	declare deltypedefId bigint;
	declare delschemadefTenantId bigint;
	declare delschemadefId bigint;
	declare deltopdomainsTenantId bigint;
	declare deltopdomainsId bigint;
	declare deltldsTenantId bigint;
	declare deltldsTldId bigint;
	declare deldomainbaseTenantId bigint;
	declare deldomainbaseId bigint;
	declare delincludedbygroupTenantId bigint;
	declare delincludedbygroupTSecGroupIncludeId bigint;
	declare delgroupmembersTenantId bigint;
	declare delgroupmembersTSecGroupMemberId bigint;
	declare delgroupincludesTenantId bigint;
	declare delgroupincludesTSecGroupIncludeId bigint;
	declare deltsecgroupsTenantId bigint;
	declare deltsecgroupsTSecGroupId integer;
	declare cur_cleartablerelationnarrowed cursor for
		select
			reld.tenantid as tenantid,
			reld.id as id
		from cfbam23.tenant as tent
			inner join cfbam23.schemadef schm on
				tent.id = schm.tenantid
			inner join cfbam23.tbldef tbld on
				schm.tenantid = tbld.tenantid
				and schm.id = tbld.schemadefid
			inner join cfbam23.reldef reld on
				tbld.tenantid = reld.tenantid
				and tbld.id = reld.tableid
		where
			tent.id = argId;
	declare cur_deltablechain cursor for
		select
			chn.tenantid,
			chn.id
		from cfbam23.tenant as tent
			inner join cfbam23.schemadef schm on
				tent.id = schm.tenantid
			inner join cfbam23.tbldef tbld on
				schm.tenantid = tbld.tenantid
				and schm.id = tbld.schemadefid
			inner join cfbam23.chain_def chn on
				tbld.tenantid = chn.tenantid
				and tbld.id = chn.tableid
		where
			tent.id = argId;
	declare cur_deltablerelationcol cursor for
		select
			relc.tenantid,
			relc.id
		from cfbam23.tenant as tent
			inner join cfbam23.schemadef schm on
				tent.id = schm.tenantid
			inner join cfbam23.tbldef tbld on
				schm.tenantid = tbld.tenantid
				and schm.id = tbld.schemadefid
			inner join cfbam23.reldef reld on
				tbld.tenantid = reld.tenantid
				and tbld.id = reld.tableid
			inner join cfbam23.relcol relc on
				reld.tenantid = relc.tenantid
				and reld.id = relc.relationid
		where
			tent.id = argId;
	declare cur_deltablerelation cursor for
		select
			reld.tenantid,
			reld.id
		from cfbam23.tenant as tent
			inner join cfbam23.schemadef schm on
				tent.id = schm.tenantid
			inner join cfbam23.tbldef tbld on
				schm.tenantid = tbld.tenantid
				and schm.id = tbld.schemadefid
			inner join cfbam23.reldef reld on
				tbld.tenantid = reld.tenantid
				and tbld.id = reld.tableid
		where
			tent.id = argId;
	declare cur_deltable cursor for
		select
			tbld.tenantid,
			tbld.id
		from cfbam23.tenant as tent
			inner join cfbam23.schemadef schm on
				tent.id = schm.tenantid
			inner join cfbam23.tbldef tbld on
				schm.tenantid = tbld.tenantid
				and schm.id = tbld.schemadefid
		where
			tent.id = argId;
	declare cur_deltypedef cursor for
		select
			valu.tenantid,
			valu.id
		from cfbam23.tenant as tent
			inner join cfbam23.schemadef schm on
				tent.id = schm.tenantid
			inner join cfbam23.valdef valu on
				schm.tenantid = valu.tenantid
				and schm.id = valu.scopeid
		where
			tent.id = argId;
	declare cur_delschemadef cursor for
		select
			schm.tenantid,
			schm.id
		from cfbam23.tenant as tent
			inner join cfbam23.schemadef schm on
				tent.id = schm.tenantid
		where
			tent.id = argId;
	declare cur_deltopdomains cursor for
		select
			tdom.tenantid,
			tdom.id
		from cfbam23.tenant as tent
			inner join cfbam23.tlddef gtld on
				tent.id = gtld.tenantid
			inner join cfbam23.tdomdef tdom on
				gtld.tenantid = tdom.tenantid
				and gtld.tldid = tdom.tldid
		where
			tent.id = argId;
	declare cur_deltlds cursor for
		select
			gtld.tenantid,
			gtld.tldid
		from cfbam23.tenant as tent
			inner join cfbam23.tlddef gtld on
				tent.id = gtld.tenantid
		where
			tent.id = argId;
	declare cur_deldomainbase cursor for
		select
			bdom.tenantid,
			bdom.id
		from cfbam23.tenant as tent
			inner join cfbam23.bdomdef bdom on
				tent.id = bdom.tenantid
		where
			tent.id = argId;
	declare cur_delincludedbygroup cursor for
		select
			tgnc.tenantid,
			tgnc.tsecgrpincid
		from cfbam23.tenant as tent
			inner join cfbam23.tsecgrp tgrp on
				tent.id = tgrp.tenantid
			inner join cfbam23.tsecinc tgnc on
				tgrp.tenantid = tgnc.tenantid
				and tgrp.tsecgroupid = tgnc.incgrpid
		where
			tent.id = argId;
	declare cur_delgroupmembers cursor for
		select
			tgmb.tenantid,
			tgmb.tsecgroupmemberid
		from cfbam23.tenant as tent
			inner join cfbam23.tsecgrp tgrp on
				tent.id = tgrp.tenantid
			inner join cfbam23.tsecmemb tgmb on
				tgrp.tenantid = tgmb.tenantid
				and tgrp.tsecgroupid = tgmb.tsecgroupid
		where
			tent.id = argId;
	declare cur_delgroupincludes cursor for
		select
			tgnc.tenantid,
			tgnc.tsecgrpincid
		from cfbam23.tenant as tent
			inner join cfbam23.tsecgrp tgrp on
				tent.id = tgrp.tenantid
			inner join cfbam23.tsecinc tgnc on
				tgrp.tenantid = tgnc.tenantid
				and tgrp.tsecgroupid = tgnc.tsecgrpid
		where
			tent.id = argId;
	declare cur_deltsecgroups cursor for
		select
			tgrp.tenantid,
			tgrp.tsecgroupid
		from cfbam23.tenant as tent
			inner join cfbam23.tsecgrp tgrp on
				tent.id = tgrp.tenantid
		where
			tent.id = argId;
	declare continue handler for not found set done = true;
	select
			ClusterId,
		Id,
		TenantName,
			revision
	into
		oldClusterId,
			oldId,
			oldTenantName,
		oldRevision
	from cfbam23.tenant
	where
		Id = argId
	for update;
	select cfbam23.sp_is_system_user( argAuditUserId ) into permissionFlag;

	if( permissionFlag = false )
	then
		signal sqlstate '45001'
		set message_text = 'sp_delete_tenant() Permission denied, not identified as system',
			schema_name = 'cfbam23',
			table_name = 'tenant';
	end if;

	insert into cfbam23.tenant_h (
			id,
			auditclusterid,
			auditsessionid,
			auditstamp,
			clusterid,
			tenantname,
			revision,
			auditaction )
		select
			tent.id,
			argAuditClusterId,
			argAuditSessionId,
			now(),
			tent.clusterid,
			tent.tenantname,
			tent.revision + 1,
			3
		from cfbam23.tenant as tent
		where
			tent.id = argId;

	set done = false;
	open cur_cleartablerelationnarrowed;
	read_loop_cleartablerelationnarrowed: loop
		fetch cur_cleartablerelationnarrowed into
			cleartablerelationnarrowedTenantId,
			cleartablerelationnarrowedId;
		if done then
			leave read_loop_cleartablerelationnarrowed;
		end if;
		update cfbam23.reldef
		set
			narrowedtenantid = null,
			narrowedid = null
		where
			tenantid = cleartablerelationnarrowedTenantId
			and id = cleartablerelationnarrowedId;

	end loop;
	close cur_cleartablerelationnarrowed;

	set done = false;
	open cur_deltablechain;
	read_loop_deltablechain: loop
		fetch cur_deltablechain into
			deltablechainTenantId,
			deltablechainId;
		if done then
			leave read_loop_deltablechain;
		end if;
		call cfbam23.sp_delete_chain_def_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			deltablechainTenantId,
			deltablechainId );
	end loop;
	close cur_deltablechain;
	set done = false;
	open cur_deltablerelationcol;
	read_loop_deltablerelationcol: loop
		fetch cur_deltablerelationcol into
			deltablerelationcolTenantId,
			deltablerelationcolId;
		if done then
			leave read_loop_deltablerelationcol;
		end if;
		call cfbam23.sp_delete_relcol_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			deltablerelationcolTenantId,
			deltablerelationcolId );
	end loop;
	close cur_deltablerelationcol;
	set done = false;
	open cur_deltablerelation;
	read_loop_deltablerelation: loop
		fetch cur_deltablerelation into
			deltablerelationTenantId,
			deltablerelationId;
		if done then
			leave read_loop_deltablerelation;
		end if;
		call cfbam23.sp_delete_reldef_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			deltablerelationTenantId,
			deltablerelationId );
	end loop;
	close cur_deltablerelation;
	set done = false;
	open cur_deltable;
	read_loop_deltable: loop
		fetch cur_deltable into
			deltableTenantId,
			deltableId;
		if done then
			leave read_loop_deltable;
		end if;
		call cfbam23.sp_delete_tbldef_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			deltableTenantId,
			deltableId );
	end loop;
	close cur_deltable;
	set done = false;
	open cur_deltypedef;
	read_loop_deltypedef: loop
		fetch cur_deltypedef into
			deltypedefTenantId,
			deltypedefId;
		if done then
			leave read_loop_deltypedef;
		end if;
		call cfbam23.sp_delete_valdef_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			deltypedefTenantId,
			deltypedefId );
	end loop;
	close cur_deltypedef;
	set done = false;
	open cur_delschemadef;
	read_loop_delschemadef: loop
		fetch cur_delschemadef into
			delschemadefTenantId,
			delschemadefId;
		if done then
			leave read_loop_delschemadef;
		end if;
		call cfbam23.sp_delete_schemadef_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			delschemadefTenantId,
			delschemadefId );
	end loop;
	close cur_delschemadef;
	set done = false;
	open cur_deltopdomains;
	read_loop_deltopdomains: loop
		fetch cur_deltopdomains into
			deltopdomainsTenantId,
			deltopdomainsId;
		if done then
			leave read_loop_deltopdomains;
		end if;
		call cfbam23.sp_delete_tdomdef_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			deltopdomainsTenantId,
			deltopdomainsId );
	end loop;
	close cur_deltopdomains;
	set done = false;
	open cur_deltlds;
	read_loop_deltlds: loop
		fetch cur_deltlds into
			deltldsTenantId,
			deltldsTldId;
		if done then
			leave read_loop_deltlds;
		end if;
		call cfbam23.sp_delete_tlddef_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			deltldsTenantId,
			deltldsTldId );
	end loop;
	close cur_deltlds;
	set done = false;
	open cur_deldomainbase;
	read_loop_deldomainbase: loop
		fetch cur_deldomainbase into
			deldomainbaseTenantId,
			deldomainbaseId;
		if done then
			leave read_loop_deldomainbase;
		end if;
		call cfbam23.sp_delete_bdomdef_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			deldomainbaseTenantId,
			deldomainbaseId );
	end loop;
	close cur_deldomainbase;
	set done = false;
	open cur_delincludedbygroup;
	read_loop_delincludedbygroup: loop
		fetch cur_delincludedbygroup into
			delincludedbygroupTenantId,
			delincludedbygroupTSecGroupIncludeId;
		if done then
			leave read_loop_delincludedbygroup;
		end if;
		call cfbam23.sp_delete_tsecinc_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			delincludedbygroupTenantId,
			delincludedbygroupTSecGroupIncludeId );
	end loop;
	close cur_delincludedbygroup;
	set done = false;
	open cur_delgroupmembers;
	read_loop_delgroupmembers: loop
		fetch cur_delgroupmembers into
			delgroupmembersTenantId,
			delgroupmembersTSecGroupMemberId;
		if done then
			leave read_loop_delgroupmembers;
		end if;
		call cfbam23.sp_delete_tsecmemb_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			delgroupmembersTenantId,
			delgroupmembersTSecGroupMemberId );
	end loop;
	close cur_delgroupmembers;
	set done = false;
	open cur_delgroupincludes;
	read_loop_delgroupincludes: loop
		fetch cur_delgroupincludes into
			delgroupincludesTenantId,
			delgroupincludesTSecGroupIncludeId;
		if done then
			leave read_loop_delgroupincludes;
		end if;
		call cfbam23.sp_delete_tsecinc_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			delgroupincludesTenantId,
			delgroupincludesTSecGroupIncludeId );
	end loop;
	close cur_delgroupincludes;
	set done = false;
	open cur_deltsecgroups;
	read_loop_deltsecgroups: loop
		fetch cur_deltsecgroups into
			deltsecgroupsTenantId,
			deltsecgroupsTSecGroupId;
		if done then
			leave read_loop_deltsecgroups;
		end if;
		call cfbam23.sp_delete_tsecgrp_by_ididx( argAuditClusterId,
			argAuditUserId,
			argAuditSessionId,
			secClusterId,
			secTenantId,
			deltsecgroupsTenantId,
			deltsecgroupsTSecGroupId );
	end loop;
	close cur_deltsecgroups;
	delete from cfbam23.tenant
	where
		id = argId;
	select row_count()
	into RowsAffected;

	if RowsAffected != 1 and RowsAffected != 0
	then
		signal sqlstate '45000'
		set message_text = 'sp_delete_tenant() Expected to affect 1 tenant',
			schema_name = 'cfbam23',
			table_name = 'tenant';
	end if;

end;////
