--
--	@(#) dbcreate/cfbam/sybase/crsp_moveup_relcol.isql
--
--	CFBam
--
--	Copyright (c) 2014-2015 Mark Sobkow
--	
--	This program is available as free software under the GNU GPL v3, under
--	the Eclipse Public License 1.0, or under a commercial license from Mark
--	Sobkow.  For commercial licensing details, please contact msobkow@sasktel.net.
--	
--	You should have received copies of the complete license text for
--	GPLv3.txt and EPLv1_0.txt, containing the text
--	of the GNU General Public License v 3.0 and the Eclipse Public License v 1.0.
--	
--	Under the terms of the GPL:
--	
--		This program is free software: you can redistribute it and/or modify
--		it under the terms of the GNU General Public License as published by
--		the Free Software Foundation, either version 3 of the License, or
--		(at your option) any later version.
--	  
--		This program is distributed in the hope that it will be useful,
--		but WITHOUT ANY WARRANTY; without even the implied warranty of
--		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--		GNU General Public License for more details.
--	  
--		You should have received a copy of the GNU General Public License
--		along with this program.  If not, see <http://www.gnu.org/licenses/>.
--	
--	This software incorporates code originally Copyright (c) Mark Sobkow 2014-2015
--	and licensed under the BSD 3-Clause license as written by xfree86.org:
--	
--	Redistribution and use in source and binary forms, with or without
--	modification, are permitted provided that the following conditions are
--	met:
--	
--	    (1) Redistributions of source code must retain the above copyright
--	    notice, this list of conditions and the following disclaimer. 
--	
--	    (2) Redistributions in binary form must reproduce the above copyright
--	    notice, this list of conditions and the following disclaimer in
--	    the documentation and/or other materials provided with the
--	    distribution.  
--	    
--	    (3)The name of the author may not be used to
--	    endorse or promote products derived from this software without
--	    specific prior written permission.
--	
--	THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
--	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
--	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
--	DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
--	INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
--	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
--	SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
--	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
--	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
--	IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
--	POSSIBILITY OF SUCH DAMAGE.
--	
--
-- **********************************************************************
--
--	Code manufactured by MSS Code Factory
--

if exists ( select * from sysobjects where name = 'sp_moveup_relcol' )
begin
	drop proc sp_moveup_relcol
end
go

create proc sp_moveup_relcol
	@argAuditClusterId bigint,
	@argAuditUserId varchar(36),
	@argAuditSessionId varchar(36),
	@secClusterId bigint,
	@secTenantId bigint,
	@argTenantId bigint,
	@argId bigint,
	@argRevision int
as
	declare @varTenantId bigint
	declare @varRelationId bigint
	declare @gprevTenantId bigint
	declare @gprevId bigint
	declare @varprevTenantId bigint
	declare @varprevId bigint
	declare @varnextTenantId bigint
	declare @varnextId bigint	declare @oldRevision int
	declare @rc int
	declare @oldTenantId bigint
	declare @oldRelationId bigint
	declare @oldId bigint
	declare @oldDefSchemaTenantId bigint
	declare @oldDefSchemaId bigint
	declare @oldName varchar(192)
	declare @oldShortName varchar(16)
	declare @oldLabel varchar(64)
	declare @oldShortDescription varchar(128)
	declare @oldDescription varchar(1023)
	declare @oldFromColId bigint
	declare @oldToColId bigint
	declare @oldPrevTenantId bigint
	declare @oldPrevId bigint
	declare @oldNextTenantId bigint
	declare @oldNextId bigint
	declare @oldDefaultVisibility char(1)
	declare @oldAuditCreatedAt bigdatetime
	declare @oldAuditCreatedBy varchar(36)
	declare @oldAuditUpdatedAt bigdatetime
	declare @oldAuditUpdatedBy varchar(36)
	declare @permissionFlag int
begin
	select
		@varTenantId = tenantid,
		@varRelationId = relationid
	from cfbam23..relcol
	where
		tenantid = @argTenantId
		and id = @argId

	update cfbam23..scopedef
	set revision = revision + 1
	where
		tenantid = @varTenantId
		and id = @varRelationId

	update cfbam23..relcol
	set forcesynclock = forcesynclock + 1
	where
			tenantid = @argTenantId
		and id = @argId
	select @rc = @@rowcount
	if @rc != 1
	begin
		raiserror 17004 "Data collision detected -- primary key does not exist"
	end

	select
		@oldAuditCreatedAt = relc.createdat,
		@oldAuditCreatedBy = relc.createdby,
		@oldAuditUpdatedAt = relc.updatedat,
		@oldAuditUpdatedBy = relc.updatedby,
		@oldTenantId = relc.tenantid,
		@oldRelationId = relc.relationid,
		@oldId = relc.id,
		@oldDefSchemaTenantId = relc.defschtentid,
		@oldDefSchemaId = relc.defschid,
		@oldName = relc.name,
		@oldShortName = relc.short_name,
		@oldLabel = relc.label,
		@oldShortDescription = relc.short_descr,
		@oldDescription = relc.descr,
		@oldFromColId = relc.fromcolid,
		@oldToColId = relc.tocolid,
		@oldPrevTenantId = relc.prevtenantid,
		@oldPrevId = relc.previd,
		@oldNextTenantId = relc.nexttenantid,
		@oldNextId = relc.nextid,
		@oldDefaultVisibility = relc.dflt_vis,
		@oldRevision = relc.revision
	from cfbam23..relcol as relc
	where
			relc.tenantid = @argTenantId
			and relc.id = @argId
	if @argRevision != @oldRevision
	begin
		raiserror 17021 "sp_moveup_relcol() Data collision detected"
	end

	if( @oldTenantId != @secTenantId )
	begin
		exec sp_is_system_user @permissionFlag output, @argAuditUserId
		if( @permissionFlag = 0 )
		begin
			raiserror 17021 "sp_moveup_relcol() Permission denied -- Data is not owned by logged in tenant"
		end
	end

	exec sp_is_tenant_user @permissionFlag output, @oldTenantId, 'UpdateRelationCol', @argAuditUserId
	if( @permissionFlag = 0 )
	begin
		raiserror 17021 "sp_moveup_relcol() Permission denied -- User not found in tenant TSecGroup for UpdateRelationCol"
	end

	select
		@gprevTenantId = prvrelc.prevtenantid,
		@gprevId = prvrelc.previd,
		@varprevTenantId = relc.prevtenantid,
		@varprevId = relc.previd,
		@varnextTenantId = relc.nexttenantid,
		@varnextId = relc.nextid
	from cfbam23..relcol relc
		left outer join cfbam23..relcol prvrelc on
			prvrelc.tenantid = relc.prevtenantid
			and prvrelc.id = relc.previd
		left outer join cfbam23..relcol nxtrelc on
			nxtrelc.tenantid = relc.nexttenantid
			and nxtrelc.id = relc.nextid
	where
		relc.tenantid = @argTenantId
		and relc.id = @argId

	if( @varprevTenantId is not null )
	begin
		if( @gprevTenantId is not null )
		begin
			update cfbam23..relcol
			set
				revision = revision + 1,
				updatedby = @argAuditUserId,
				updatedat = current_bigdatetime(),
				nexttenantid = @argTenantId,
				nextid = @argId
			where
				tenantid = @gprevTenantId
				and id = @gprevId

			select @rc = @@rowcount

			if @rc != 1
			begin
				raiserror 17021 "sp_moveup_relcol() Expected to affect one grandprev row"
			end

			exec sp_audit_relcol @argAuditClusterId,
				@argAuditUserId,
				@argAuditSessionId,
				@secClusterId,
				@secTenantId,
				@gprevTenantId,
				@gprevId,
				2
		end

		update cfbam23..relcol
		set
			revision = revision + 1,
			updatedby = @argAuditUserId,
			updatedat = current_bigdatetime(),
			prevtenantid = @gprevTenantId,
			previd = @gprevId,
			nexttenantid = @varprevTenantId,
			nextid = @varprevId
		where
			tenantid = @argTenantId
			and id = @argId

		select @rc = @@rowcount

		if @rc != 1
		begin
			raiserror 17021 "sp_moveup_relcol() Expected to affect one obj row"
		end

		exec sp_audit_relcol @argAuditClusterId,
			@argAuditUserId,
			@argAuditSessionId,
			@secClusterId,
			@secTenantId,
			@argTenantId,
			@argId,
			2

		update cfbam23..relcol
		set
			revision = revision + 1,
			updatedby = @argAuditUserId,
			updatedat = current_bigdatetime(),
			prevtenantid = @argTenantId,
			previd = @argId,
			nexttenantid = @varnextTenantId,
			nextid = @varnextId
		where
			tenantid = @varprevTenantId
			and id = @varprevId

		select @rc = @@rowcount

		if @rc != 1
		begin
			raiserror 17021 "sp_moveup_relcol() Expected to affect one prev row"
		end

		exec sp_audit_relcol @argAuditClusterId,
			@argAuditUserId,
			@argAuditSessionId,
			@secClusterId,
			@secTenantId,
			@varprevTenantId,
			@varprevId,
			2

		if( @varnextTenantId is not null )
		begin
			update cfbam23..relcol
			set
				revision = revision + 1,
				updatedby = @argAuditUserId,
				updatedat = current_bigdatetime(),
				prevtenantid = @varprevTenantId,
				previd = @varprevId
			where
				tenantid = @varnextTenantId
				and id = @varnextId

			select @rc = @@rowcount

			if @rc != 1
			begin
				raiserror 17021 "sp_moveup_relcol() Expected to affect one next row"
			end

			exec sp_audit_relcol @argAuditClusterId,
				@argAuditUserId,
				@argAuditSessionId,
				@secClusterId,
				@secTenantId,
				@varnextTenantId,
				@varnextId,
				2
		end
	end

	update cfbam23..scopedef
	set revision = revision - 1
	where
		tenantid = @varTenantId
		and id = @varRelationId

	select
			relc.createdby,
			convert( varchar, relc.createdat, 23 ) as createdat,
			relc.updatedby,
			convert( varchar, relc.updatedat, 23 ) as updatedat,
			relc.tenantid as tenantid,
			relc.relationid as relationid,
			relc.id as id,
			relc.defschtentid as defschtentid,
			relc.defschid as defschid,
			relc.name as name,
			relc.short_name as short_name,
			relc.label as label,
			relc.short_descr as short_descr,
			relc.descr as descr,
			relc.fromcolid as fromcolid,
			relc.tocolid as tocolid,
			relc.prevtenantid as prevtenantid,
			relc.previd as previd,
			relc.nexttenantid as nexttenantid,
			relc.nextid as nextid,
			relc.dflt_vis as dflt_vis,
		relc.revision as revision
	from cfbam23..relcol as relc
	where
		relc.tenantid = @argTenantId
			and relc.id = @argId
end
go
