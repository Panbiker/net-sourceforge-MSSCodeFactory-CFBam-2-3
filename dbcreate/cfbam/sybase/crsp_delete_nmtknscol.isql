--
--	@(#) dbcreate/cfbam/sybase/crsp_delete_nmtknscol.isql
--
--	CFBam
--
--	Copyright (c) 2014-2015 Mark Sobkow
--	
--	This program is available as free software under the GNU GPL v3, under
--	the Eclipse Public License 1.0, or under a commercial license from Mark
--	Sobkow.  For commercial licensing details, please contact msobkow@sasktel.net.
--	
--	You should have received copies of the complete license text for
--	GPLv3.txt and EPLv1_0.txt, containing the text
--	of the GNU General Public License v 3.0 and the Eclipse Public License v 1.0.
--	
--	Under the terms of the GPL:
--	
--		This program is free software: you can redistribute it and/or modify
--		it under the terms of the GNU General Public License as published by
--		the Free Software Foundation, either version 3 of the License, or
--		(at your option) any later version.
--	  
--		This program is distributed in the hope that it will be useful,
--		but WITHOUT ANY WARRANTY; without even the implied warranty of
--		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--		GNU General Public License for more details.
--	  
--		You should have received a copy of the GNU General Public License
--		along with this program.  If not, see <http://www.gnu.org/licenses/>.
--	
--	This software incorporates code originally Copyright (c) Mark Sobkow 2014-2015
--	and licensed under the BSD 3-Clause license as written by xfree86.org:
--	
--	Redistribution and use in source and binary forms, with or without
--	modification, are permitted provided that the following conditions are
--	met:
--	
--	    (1) Redistributions of source code must retain the above copyright
--	    notice, this list of conditions and the following disclaimer. 
--	
--	    (2) Redistributions in binary form must reproduce the above copyright
--	    notice, this list of conditions and the following disclaimer in
--	    the documentation and/or other materials provided with the
--	    distribution.  
--	    
--	    (3)The name of the author may not be used to
--	    endorse or promote products derived from this software without
--	    specific prior written permission.
--	
--	THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
--	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
--	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
--	DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
--	INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
--	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
--	SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
--	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
--	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
--	IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
--	POSSIBILITY OF SUCH DAMAGE.
--	
--
-- **********************************************************************
--
--	Code manufactured by MSS Code Factory
--

if exists ( select * from sysobjects where name = 'sp_delete_nmtknscol' )
begin
	drop proc sp_delete_nmtknscol
end
go

create proc sp_delete_nmtknscol
	@argAuditClusterId bigint,
	@argAuditUserId varchar(36),
	@argAuditSessionId varchar(36),
	@secClusterId bigint,
	@secTenantId bigint,
	@argTenantId bigint,
	@argId bigint,
	@argRevision int
as
	declare @varTenantId bigint
	declare @varTableId bigint
	declare @prevClassCode varchar(4)
	declare @nextClassCode varchar(4)
	declare @prevPrevTenantId bigint
	declare @prevPrevId bigint
	declare @nextNextTenantId bigint
	declare @nextNextId bigint	declare @oldRevision int
	declare @rc int
	declare @oldClassCode MssCFClassCode
	declare @oldTenantId bigint
	declare @oldScopeId bigint
	declare @oldId bigint
	declare @oldDefSchemaTenantId bigint
	declare @oldDefSchemaId bigint
	declare @oldName varchar(192)
	declare @oldShortName varchar(16)
	declare @oldLabel varchar(64)
	declare @oldShortDescription varchar(128)
	declare @oldDescription varchar(1023)
	declare @oldIsNullable char(1)
	declare @oldGenerateId char(1)
	declare @oldDataScopeId smallint
	declare @oldViewAccessSecurityId smallint
	declare @oldEditAccessSecurityId smallint
	declare @oldViewAccessFrequencyId smallint
	declare @oldEditAccessFrequencyId smallint
	declare @oldPrevTenantId bigint
	declare @oldPrevId bigint
	declare @oldNextTenantId bigint
	declare @oldNextId bigint
	declare @oldDefaultVisibility char(1)
	declare @oldDbName varchar(32)
	declare @oldMaxLen integer
	declare @oldInitValue varchar(256)
	declare @oldDefaultValue varchar(256)
	declare @oldNullValue varchar(256)
	declare @oldUnknownValue varchar(256)
	declare @oldShowLines smallint
	declare @oldTableId bigint
	declare @oldAuditCreatedAt bigdatetime
	declare @oldAuditCreatedBy varchar(36)
	declare @oldAuditUpdatedAt bigdatetime
	declare @oldAuditUpdatedBy varchar(36)
	declare @permissionFlag int
begin
	select
		@varTenantId = tenantid,
		@varTableId = tableid
	from cfbam23..nmtknscol
	where
		tenantid = @argTenantId
		and id = @argId

	update cfbam23..scopedef
	set revision = revision + 1
	where
		tenantid = @varTenantId
		and id = @varTableId

	update cfbam23..valdef
	set forcesynclock = forcesynclock + 1
	where
			tenantid = @argTenantId
		and id = @argId
	select @rc = @@rowcount
	if @rc != 1
	begin
		raiserror 17004 "Data collision detected -- primary key does not exist"
	end

	select
		@oldClassCode = valu.classcode,
		@oldAuditCreatedAt = valu.createdat,
		@oldAuditCreatedBy = valu.createdby,
		@oldAuditUpdatedAt = valu.updatedat,
		@oldAuditUpdatedBy = valu.updatedby,
		@oldTenantId = valu.tenantid,
		@oldScopeId = valu.scopeid,
		@oldId = valu.id,
		@oldDefSchemaTenantId = valu.defschtentid,
		@oldDefSchemaId = valu.defschid,
		@oldName = valu.name,
		@oldShortName = valu.short_name,
		@oldLabel = valu.label,
		@oldShortDescription = valu.short_descr,
		@oldDescription = valu.descr,
		@oldIsNullable = valu.isnullable,
		@oldGenerateId = valu.generateid,
		@oldDataScopeId = valu.datascopeid,
		@oldViewAccessSecurityId = valu.vasecid,
		@oldEditAccessSecurityId = valu.easecid,
		@oldViewAccessFrequencyId = valu.vafid,
		@oldEditAccessFrequencyId = valu.eafid,
		@oldPrevTenantId = valu.prevtenantid,
		@oldPrevId = valu.previd,
		@oldNextTenantId = valu.nexttenantid,
		@oldNextId = valu.nextid,
		@oldDefaultVisibility = valu.dflt_vis,
		@oldDbName = atom.dbname,
		@oldMaxLen = ntsd.maxlen,
		@oldInitValue = ntsd.initval,
		@oldDefaultValue = ntsd.defval,
		@oldNullValue = ntsd.nullvalue,
		@oldUnknownValue = ntsd.unknownval,
		@oldShowLines = ntsd.showlines,
		@oldTableId = ntsc.tableid,
		@oldRevision = valu.revision
	from cfbam23..nmtknscol as ntsc
			inner join cfbam23..nmtknsdef ntsd on
				ntsc.tenantid = ntsd.tenantid
				and ntsc.id = ntsd.id
			inner join cfbam23..atomdef atom on
				ntsd.tenantid = atom.tenantid
				and ntsd.id = atom.id
			inner join cfbam23..valdef valu on
				atom.tenantid = valu.tenantid
				and atom.id = valu.id
	where
			valu.tenantid = @argTenantId
			and valu.id = @argId
	if @argRevision != @oldRevision
	begin
		raiserror 17000 "sp_delete_nmtknscol() Data collision detected"
	end

	exec sp_is_tenant_user @permissionFlag output, @secTenantId, 'DeleteNmTokensCol', @argAuditUserId
	if( @permissionFlag = 0 )
	begin
		raiserror 17008 "Permission denied -- User not found in tenant TSecGroup for DeleteNmTokensCol"
	end

	select
		@prevClassCode = prvvalu.classcode,
		@prevPrevTenantId = myself.prevtenantid,
		@prevPrevId = myself.previd,
		@nextClassCode = nxtvalu.classcode,
		@nextNextTenantId = myself.nexttenantid,
		@nextNextId = myself.nextid
	from cfbam23..valdef myself
		left outer join cfbam23..valdef prvvalu on
			prvvalu.tenantid = myself.prevtenantid
			and prvvalu.id = myself.previd
		left outer join cfbam23..valdef nxtvalu on
			nxtvalu.tenantid = myself.nexttenantid
			and nxtvalu.id = myself.nextid
	where
		myself.tenantid = @argTenantId
		and myself.id = @argId

	if( @prevPrevTenantId is not null )
	begin
		update cfbam23..valdef
		set
			revision = revision + 1,
			updatedby = @argAuditUserId,
			updatedat = current_bigdatetime(),
			nexttenantid = @nextNextTenantId,
			nextid = @nextNextId
		where
			tenantid = @prevPrevTenantId
			and id = @prevPrevId

		exec sp_audit_valdef @argAuditClusterId,
			@argAuditUserId,
			@argAuditSessionId,
			@secClusterId,
			@secTenantId,
			@prevClassCode,
			@prevPrevTenantId,
			@prevPrevId,
			2
	end

	if( @nextNextTenantId is not null )
	begin
		update cfbam23..valdef
		set
			revision = revision + 1,
			updatedby = @argAuditUserId,
			updatedat = current_bigdatetime(),
			prevtenantid = @prevPrevTenantId,
			previd = @prevPrevId
		where
			tenantid = @nextNextTenantId
			and id = @nextNextId

		exec sp_audit_valdef @argAuditClusterId,
			@argAuditUserId,
			@argAuditSessionId,
			@secClusterId,
			@secTenantId,
			@nextClassCode,
			@nextNextTenantId,
			@nextNextId,
			2
	end

	if( @oldClassCode = 'NTSC' )
	begin
		insert into cfbam23..nmtknscol_h (
			tenantid,
			id,
			classcode,
			auditclusterid,
			auditsessionid,
			auditstamp,
			scopeid,
			defschtentid,
			defschid,
			name,
			short_name,
			label,
			short_descr,
			descr,
			isnullable,
			generateid,
			datascopeid,
			vasecid,
			easecid,
			vafid,
			eafid,
			prevtenantid,
			previd,
			nexttenantid,
			nextid,
			dflt_vis,
			dbname,
			maxlen,
			initval,
			defval,
			nullvalue,
			unknownval,
			showlines,
			tableid,
			revision,
			auditaction )
		select
			valu.tenantid,
			valu.id,
			valu.classcode,
			@argAuditClusterId,
			@argAuditSessionId,
			current_bigdatetime(),
			valu.scopeid,
			valu.defschtentid,
			valu.defschid,
			valu.name,
			valu.short_name,
			valu.label,
			valu.short_descr,
			valu.descr,
			valu.isnullable,
			valu.generateid,
			valu.datascopeid,
			valu.vasecid,
			valu.easecid,
			valu.vafid,
			valu.eafid,
			valu.prevtenantid,
			valu.previd,
			valu.nexttenantid,
			valu.nextid,
			valu.dflt_vis,
			atom.dbname,
			ntsd.maxlen,
			ntsd.initval,
			ntsd.defval,
			ntsd.nullvalue,
			ntsd.unknownval,
			ntsd.showlines,
			ntsc.tableid,
			@argRevision + 1,
			3
		from cfbam23..nmtknscol as ntsc
			inner join cfbam23..nmtknsdef ntsd on
				ntsc.tenantid = ntsd.tenantid
				and ntsc.id = ntsd.id
			inner join cfbam23..atomdef atom on
				ntsd.tenantid = atom.tenantid
				and ntsd.id = atom.id
			inner join cfbam23..valdef valu on
				atom.tenantid = valu.tenantid
				and atom.id = valu.id
		where
			ntsc.tenantid = @argTenantId
			and ntsc.id = @argId
	end
	delete from cfbam23..nmtknscol
	where
		tenantid = @argTenantId
		and id = @argId
	select @rc = @@rowcount

	if @rc != 1
	begin
		raiserror 17004 "sp_delete_nmtknscol() Data collision detected"
	end
	delete from cfbam23..nmtknsdef
	where
		tenantid = @argTenantId
		and id = @argId
	select @rc = @@rowcount

	if @rc != 1
	begin
		raiserror 17004 "sp_delete_nmtknscol() Data collision detected"
	end
	delete from cfbam23..atomdef
	where
		tenantid = @argTenantId
		and id = @argId
	select @rc = @@rowcount

	if @rc != 1
	begin
		raiserror 17004 "sp_delete_nmtknscol() Data collision detected"
	end
	delete from cfbam23..valdef
	where
		tenantid = @argTenantId
		and id = @argId
		and revision = @argRevision
	select @rc = @@rowcount

	if @rc != 1
	begin
		raiserror 17004 "sp_delete_nmtknscol() Data collision detected"
	end
	update cfbam23..scopedef
	set revision = revision - 1
	where
		tenantid = @varTenantId
		and id = @varTableId

end
go
